{"mappings":"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","sources":["node_modules/@swc/helpers/src/_class_extract_field_descriptor.mjs","node_modules/@swc/helpers/src/_class_apply_descriptor_get.mjs","node_modules/@swc/helpers/src/_class_private_field_get.mjs","node_modules/@swc/helpers/src/_check_private_redeclaration.mjs","node_modules/@swc/helpers/src/_class_private_field_init.mjs","node_modules/@swc/helpers/src/_class_apply_descriptor_set.mjs","node_modules/@swc/helpers/src/_class_private_field_set.mjs","node_modules/@swc/helpers/src/_class_private_method_get.mjs","node_modules/@swc/helpers/src/_class_private_method_init.mjs","node_modules/nanoid/index.browser.js","src/js/storage.js","src/js/04-todo-list.js"],"sourcesContent":["export default function _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\n","export default function _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\n","import classExtractFieldDescriptor from './_class_extract_field_descriptor.mjs';\nimport classApplyDescriptorGet from './_class_apply_descriptor_get.mjs';\n\nexport default function _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}\n","export default function _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\n","import _checkPrivateRedeclaration from \"./_check_private_redeclaration.mjs\";\n\nexport default function _classPrivateFieldInit(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\n","export default function _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      // This should only throw in strict mode, but class bodies are\n      // always strict and private fields can only be used inside\n      // class bodies.\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\n","import classExtractFieldDescriptor from './_class_extract_field_descriptor.mjs';\nimport classApplyDescriptorSet from './_class_apply_descriptor_set.mjs';\n\nexport default function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\n","export default function _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return fn;\n}\n","import _checkPrivateRedeclaration from \"./_check_private_redeclaration.mjs\";\n\nexport default function _classPrivateMethodInit(obj, privateSet) {\n  _checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// save/load перевіряють помилки парса і подібну рутину\n//де потрібно перевірка JSON stringify/parse  ці save/load виконують  де є import з /storage.js\n//import { save,load,remove } from './storage';\n//викликати save(key,value)/load(key)\n\nconst save = (key, value) => {\n  try {\n    // console.log(\"from save try\")\n    const serializedState = JSON.stringify(value); //value перетворює в JSON формат,тобто обгортає всі ключі в \"\"\n    localStorage.setItem(key, serializedState);//в localStorage стіорює пару key зі значенням serializedState\n  } catch (error) {\n    console.error(\"Set state error: \", error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    // console.log(\"from load try\");\n    const serializedState = localStorage.getItem(key); //витягає value для key з localStorage\n    return serializedState === null ? undefined : JSON.parse(serializedState); //парсить це value в JS обєкт \n  } catch (error) {\n    console.error(\"Get state error: \", error.message);\n  }\n};\n\nconst remove = key => {\n  try {\n    // console.log(\"from в remove try\")\n     return localStorage.removeItem(key); //прибирає значення для key з  localStorage\n    } catch (error) {\n      console.error(\"Get state error: \", error.message);\n    }\n}\nexport default { //виводить на зовні для тих програм ,що мають import  storage from './storage'\n  save,\n  load,\n  remove,\n};\n//Тепер ми можемо безпечно додавати і читати записи з локального сховища.\n//Спробуйте самостійно дописати метод \n//remove(key) для видалення запису,\n// аналогічно load(key)\n// і save(key, value).\n","import { nanoid } from 'nanoid';\nimport localStore from './storage';\n\n/*\n  Написати Todo-list де можна створювати, видаляти елементи та реалізувати\n  збереження списку в локал сторедж\n */\n\nclass TodoList {   //створення обєкту з властивостями і методами (# -приватні,тобто невидно на екземплярі)\n  #STORAGE_KEY = 'TODO_LIST_ITEMS'; //назва ключа в localStorage,куди зберігати todo-list назва ключа/властивосиі(приватна) \n  #ENTER_KEY_CODE = 'Enter';  //code клавіші ,на яку повіситься слухач = назва ключа/властивосиі(приватна)\n  #appMarkup = // базова html  розмітка списку задач =назва ключа/властивосиі(приватна)\n  ` <div class=\"todo-list\">\n      <header class=\"header\">\n        <input class=\"header__input\" type=\"text\" placeholder=\"Enter an activity...\">\n        <button type=\"button\" class=\"header__button\"><i class=\"fa fa-plus\"></i></button>\n      </header>\n      <main class=\"list-container\">\n        <ul class=\"list current-list\"></ul>\n        <hr>\n        <ul class=\"list done-list\"></ul>\n      </main>\n      </script>\n    </div>\n  `;//в розмітці 2списка з класами current-list-внесені/done-list-виконані\n\n  #refs = {};//назва ключа/властивосиі(приватна)= порожній обєкт посилань ел-тів html розмітки\n  #items = localStore.load(this.#STORAGE_KEY) || []; ////сюди розпарсився   JSON рядок з localStorage якщо є /якщо нема то порожній ключ/властивість масиву обєктів(приватна)\n   \n  init(targetNode) {  //метод класу публічний(видно на екземплярі)\n    //або вказати tag/id/class/attribut в методі,або в на початку елемента з класом for_todo\n    const targetElement = targetNode || document.querySelector('.for_todo'); //ел-т(target),куди вставляти html всю розмітку\n    targetElement.insertAdjacentHTML('afterbegin',this.#appMarkup); //',) ;//вставляє  базову html розмітку\n\n    this.#defineRefs(); //створює посилання на ел-ти для керування => викликає приватний метод #defineRefs()   this =class Todolist\n    this.#initListeners();//вішає лісенери подій => викликає приватний метод #initListeners()  this =class Todolist\n    this.#render();//рендерить розмітку введеного рядка викликає приватний метод #render() this =class Todolist\n  }\n  \n  #defineRefs() { //приватний метод створює обєкт посилань на елементи(розмітку) html \n    this.#refs.app = document.querySelector('.todo-list');//посилання app це ел-т з класом todo-list(div в markup ключі)\n    if (this.#refs.app) {//обєкт посилань \n      this.#refs.addItemBtn = this.#refs.app.querySelector('.header__button');//блок розмітки кнопки  header__button класу \n      this.#refs.itemInput = this.#refs.app.querySelector('.header__input');//блок розмітки інпута  header__inpu класу\n      this.#refs.currentList = this.#refs.app.querySelector('.current-list');//блок роз-ки списку ul current-list класу \n      this.#refs.doneList = this.#refs.app.querySelector('.done-list');//блок роз-ки списку  ul  з done-list класом \n      this.#refs.listContainer = document.querySelector('.list-container');//блок розмітка (зона списків) list-container класу\n    }\n  }\n  \n  #initListeners() { //приватний метод(невидно на екземплярі)навішує лісенерів:\n    this.#refs.addItemBtn.addEventListener('click', this.#addTask.bind(this));//клік на кнопку \"+\"\" - додавання task\n    this.#refs.listContainer.addEventListener('click', this.#taskContainerOnClick.bind(this));//клік на контейнер списків  делегування (remove/toggle)\n    this.#refs.itemInput.addEventListener('keypress', this.#addTaskByEnterKey.bind(this));//yнатиснення в input кнопки enter \n  }\n  \n  #updateItems(items) { //приватний метод рендерить журнали існуючих обєктів   і  стрінгіфай  #items в localStorage даних\n    this.#items = items; //записує передані items\n    this.#render(); //приватний метод цього класу виконує  рендерінг розмітки\n    localStore.save(this.#STORAGE_KEY, items);//передані items стрінгіфай в JSON форматі (рядок) \n  }\n  \n  #addTask() { //створює обєкт задачі з 3-ма ключами /потім рендер існуючого #items в журнал /функція повішана на клік по кнопці \"+\"  та натисненні enter\n    const { value } = this.#refs.itemInput; //деструктуризація ел-та input,витягання одного з атрибутів- value\n\n    if (value) { //якщо непусте поле input\n      const items = [...this.#items]; //в items розпилити масив #items котре витягнуте з locslStorage перетворене в JS формат)\n      items.push({ id: nanoid(), value, done: false });// в кінець додати введений в input обєкт з 3-ма ключами done: false -невиконаний\n       //id:унікал id створений завдяки  import { nanoid } from 'nanoid';\n       //value  з input(через деструктуризацію #refs )\n      this.#updateItems(items);\n     }\n\n    this.#refs.itemInput.value = null; //після рознесення данних і рендерення розмітки очищає input\n  }\n  \n  #addTaskByEnterKey(e) {  //при насненні enter в input e-обєкт події=клавіша\n     if (e.code === this.#ENTER_KEY_CODE) { //#ENTER_KEY_CODE = 'Enter'\n      this.#addTask(); \n    }\n  }\n  \n  #taskContainerOnClick(e) { ///по кліку на контейнере журнал  введених задач\n    //визначає від клікнутого тега(target) найближчий(зверху) тег з класом .list__item[data-id]\n    const taskRef = e.target.closest('.list__item[data-id]'); //\n   //якщо визначило\n    if (taskRef) {\n      if (e.target.dataset.action === 'remove') { //якщо в визначеного таргет є data-action=remove\n        this.#removeTask(taskRef.dataset.id); // викликаємо метод remove на li з data-id = id \n      }\n\n      if (e.target.dataset.action === 'toggle') { //якщо в визначеного таргет є data-action=toggle\n        this.#toggleTask(taskRef.dataset.id); // викликаємо метод toggle на li з data-id = id на  target\n      }\n    }\n  }\n  \n  #removeTask(id) {// remove фільтруємо #items = ел-ти якого не мають цього id таким чином видаляємо вибраний\n    const items = this.#items.filter((item) => item.id !== id);\n    this.#updateItems(items); //записує в #items/рендерить розмітку по журналах існуючих #items/стрінгіфаїть #items в JSON в localStorage\n  }\n\n  #toggleTask(id) {   //повертає розпушене  li з цим id і міняє ключ done на протилежний тому що був\n    const items = this.#items.map((item) => {// пробігає по всьому масиву обєктів #items\n      if (id === item.id) {                  // витягає його по id\n        return { ...item,done: !item.done, }; //повертає розпушене це li/міняє done на протилежний тому що був\n      }\n      return item; //нічого не міняє якщо нема такого id\n    });\n\n    this.#updateItems(items);\n    //записує створений масив в приватну властивість #items,\n      //рендерить розмітку згідно цих #items\n      //записує стрінгіфай items JSON формат в localStorage\n        \n  }\n  \n  #render() {//рендерить розмітку журнала  введеного/зміненого обєкта і  фільтрує його по done розмітка на 2 журнали\n   //деструктуризує його { id, value, done } \n  //сторює li списка та додає йому data атрибути: data-id=\"${id} /data-done=\"${done}\n      //id згенероване\n      //value з input записує в span class=\"list__item-name\"\n      //done= при add false при toggle протилежне попередньому\n      //створює div 2х кнопок-іконок:\n      //1.смітник  remove fa fa-trash-o з б-ки вверху css який причепл в html \n      // @import 'https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css';\n      //з класом remove та data-action=\"remove\"\n      //span з роділювачем |\n      //2.зелений кружечок з галочкою - fa-check-circle ,\n      //який змінює клас uncomplete fa-check - circle / complete fa - check - circle - o \n      //в залежності що є в done true / false та data-action=\"toggle\"\n      //\n    const getItem = ({ id, value, done }) =>\n     `\n      <li class=\"list__item\" data-id=\"${id}\" data-done=\"${done}\"> \n        <span class=\"list__item-name\">${value}</span>\n        <div class=\"list__buttons\">\n          <i class=\"list__button remove fa fa-trash-o\" data-action=\"remove\"></i>\n          <span class=\"list__bar\">|</span>\n          <i class=\"${`list__button fa ${done ? 'uncomplete fa-check-circle' : 'complete fa-check-circle-o'}`}\"\n            data-action=\"toggle\"></i>\n        </div>\n     </li>\n    `;\n   \n   //після рендерення розмітки #items фільтрується на 2 масива \n    const todoTasks = this.#items.filter(({ done }) => !done);//масив обєктів з done=false\n    const doneTasks = this.#items.filter(({ done }) => done); //масив обєктів з done=/true\n    //getItem це розмітка одного рядка  в журналі \n   //створення нового html всіх існуючих  рядків поділений на 2 журнала (пофільтровані по класах currentList/doneList)\n    this.#refs.currentList.innerHTML = todoTasks.map(getItem).join('');//заміняє весь html для масиву з done=false\n    this.#refs.doneList.innerHTML = doneTasks.map(getItem).join('');  //заміняє весь html для масиву з done=true\n  }\n}\nconst todoList = new TodoList(); //створення екземпляра класа\ntodoList.init(); //ініціалізація\n// console.log(todoList);\n/* \n*/\n/* \n    JSON (JavaScript Object Notation) – це загальний формат, \n    який представляє значення та об’єкти.\n  */\n// console.log(\n//   'JSON 1 stringify',\n//   JSON.stringify({\n//     name: 'Mango',\n//     age: 2,\n//   }),\n// );\n\n// console.log(\n//   'JSON 2 stringify',\n//   JSON.stringify([\n//     {\n//       name: 'Mango',\n//       age: 2,\n//     },\n//   ]),\n// );\n\n// console.log('JSON 1 parse', JSON.parse('{\"name\":\"Mango\",\"age\":2}'));\n\n// console.log('JSON 2 parse', JSON.parse('[{\"name\":\"Mango\",\"age\":2}]'));\n\n// console.log('до JSON');\n\n// try {\n//   const data = JSON.parse('{\"name\":\"Mango\",\"age\":2,}');\n//   console.log(data);\n// } catch (error) {\n//   console.log('Ваш JSON не валідний. Стукніть когось!');\n// }\n\n// console.log('після JSON');\n\n// localStorage, sessionStorage\n// setItem(key, value) – зберегти пару ключ/значення.\n// getItem(key) – отримати значення за ключем.\n// removeItem(key) – видалити дані за ключем.\n// clear() – видалити все.\n// key(index) – отримати ключ на заданій позиції.\n// length – кількість збережених елементів.\n\n// localStorage.setItem(\n//   'STORAGE_KEY',\n//   JSON.stringify([\n//     {\n//       name: 'Mango',\n//       age: 2,\n//     },\n//   ]),\n// );"],"names":["$99d26d6ae153323e$export$2e2bcd8739ae039","receiver","privateMap","action","has","TypeError","get","$77325facfa382e54$export$2e2bcd8739ae039","descriptor","call","value","$92121ed38d27acb0$export$2e2bcd8739ae039","$dba1998b20ced464$export$2e2bcd8739ae039","obj","privateCollection","$7efc65a322f137af$export$2e2bcd8739ae039","set","$dac75875e16c3833$export$2e2bcd8739ae039","writable","$9a4dad1b7a0c1382$export$2e2bcd8739ae039","$f6e04a1a217e0d4d$export$2e2bcd8739ae039","privateSet","fn","$2dc63754c091085f$export$2e2bcd8739ae039","add","$8069ef7e6126e429$export$ac4959f4f1338dfc","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","$e40a24b7fc93604f$export$2e2bcd8739ae039","key","serializedState","JSON","stringify","localStorage","setItem","error","console","message","getItem","undefined","parse","removeItem","$413c7674dc445223$var$_STORAGE_KEY","WeakMap","$413c7674dc445223$var$_ENTER_KEY_CODE","$413c7674dc445223$var$_appMarkup","$413c7674dc445223$var$_refs","$413c7674dc445223$var$_items","$413c7674dc445223$var$_defineRefs","WeakSet","$413c7674dc445223$var$_initListeners","$413c7674dc445223$var$_updateItems","$413c7674dc445223$var$_addTask","$413c7674dc445223$var$_addTaskByEnterKey","$413c7674dc445223$var$_taskContainerOnClick","$413c7674dc445223$var$_removeTask","$413c7674dc445223$var$_toggleTask","$413c7674dc445223$var$_render","$413c7674dc445223$var$defineRefs","this","app","document","querySelector","addItemBtn","itemInput","currentList","doneList","listContainer","$413c7674dc445223$var$initListeners","addEventListener","$413c7674dc445223$var$addTask","bind","$413c7674dc445223$var$taskContainerOnClick","$413c7674dc445223$var$addTaskByEnterKey","$413c7674dc445223$var$updateItems","items","$413c7674dc445223$var$render","save","push","done","e","code","taskRef","target","closest","dataset","$413c7674dc445223$var$removeTask","$413c7674dc445223$var$toggleTask","filter","item","map","todoTasks","doneTasks","innerHTML","join","init","targetNode","insertAdjacentHTML","load"],"version":3,"file":"04-todo-list.9e9ab760.js.map"}