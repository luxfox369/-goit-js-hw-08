function t(t,e,i){if(!e.has(t))throw new TypeError("attempted to "+i+" private field on non-instance");return e.get(t)}function e(t,e){return e.get?e.get.call(t):e.value}function i(i,n){return e(i,t(i,n,"get"))}function n(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}function s(t,e,i){n(t,e),e.set(t,i)}function a(t,e,i){if(e.set)e.set.call(t,i);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=i}}function r(e,i,n){return a(e,t(e,i,"set"),n),n}function o(t,e,i){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return i}function l(t,e){n(t,e),e.add(t)}let c=(t=21)=>crypto.getRandomValues(new Uint8Array(t)).reduce(((t,e)=>t+=(e&=63)<36?e.toString(36):e<62?(e-26).toString(36).toUpperCase():e>62?"-":"_"),"");var h={save:(t,e)=>{try{const i=JSON.stringify(e);localStorage.setItem(t,i)}catch(t){console.error("Set state error: ",t.message)}},load:t=>{try{const e=localStorage.getItem(t);return null===e?void 0:JSON.parse(e)}catch(t){console.error("Get state error: ",t.message)}},remove:t=>{try{return localStorage.removeItem(t)}catch(t){console.error("Get state error: ",t.message)}}},u=new WeakMap,d=new WeakMap,p=new WeakMap,f=new WeakMap,m=new WeakMap,v=new WeakSet,w=new WeakSet,S=new WeakSet,_=new WeakSet,g=new WeakSet,y=new WeakSet,b=new WeakSet,k=new WeakSet,W=new WeakSet;function I(){i(this,f).app=document.querySelector(".todo-list"),i(this,f).app&&(i(this,f).addItemBtn=i(this,f).app.querySelector(".header__button"),i(this,f).itemInput=i(this,f).app.querySelector(".header__input"),i(this,f).currentList=i(this,f).app.querySelector(".current-list"),i(this,f).doneList=i(this,f).app.querySelector(".done-list"),i(this,f).listContainer=document.querySelector(".list-container"))}function L(){i(this,f).addItemBtn.addEventListener("click",o(this,_,T).bind(this)),i(this,f).listContainer.addEventListener("click",o(this,y,q).bind(this)),i(this,f).itemInput.addEventListener("keypress",o(this,g,M).bind(this))}function E(t){r(this,m,t),o(this,W,O).call(this),h.save(i(this,u),t)}function T(){const{value:t}=i(this,f).itemInput;if(t){const e=[...i(this,m)];e.push({id:c(),value:t,done:!1}),o(this,S,E).call(this,e)}i(this,f).itemInput.value=null}function M(t){t.code===i(this,d)&&o(this,_,T).call(this)}function q(t){const e=t.target.closest(".list__item[data-id]");e&&("remove"===t.target.dataset.action&&o(this,b,j).call(this,e.dataset.id),"toggle"===t.target.dataset.action&&o(this,k,C).call(this,e.dataset.id))}function j(t){const e=i(this,m).filter((e=>e.id!==t));o(this,S,E).call(this,e)}function C(t){const e=i(this,m).map((e=>t===e.id?{...e,done:!e.done}:e));o(this,S,E).call(this,e)}function O(){const t=({id:t,value:e,done:i})=>`\n      <li class="list__item" data-id="${t}" data-done="${i}"> \n        <span class="list__item-name">${e}</span>\n        <div class="list__buttons">\n          <i class="list__button remove fa fa-trash-o" data-action="remove"></i>\n          <span class="list__bar">|</span>\n          <i class="${"list__button fa "+(i?"uncomplete fa-check-circle":"complete fa-check-circle-o")}"\n            data-action="toggle"></i>\n        </div>\n     </li>\n    `,e=i(this,m).filter((({done:t})=>!t)),n=i(this,m).filter((({done:t})=>t));i(this,f).currentList.innerHTML=e.map(t).join(""),i(this,f).doneList.innerHTML=n.map(t).join("")}(new class{init(t){(t||document.querySelector(".for_todo")).insertAdjacentHTML("afterbegin",i(this,p)),o(this,v,I).call(this),o(this,w,L).call(this),o(this,W,O).call(this)}constructor(){l(this,v),l(this,w),l(this,S),l(this,_),l(this,g),l(this,y),l(this,b),l(this,k),l(this,W),s(this,u,{writable:!0,value:"TODO_LIST_ITEMS"}),s(this,d,{writable:!0,value:"Enter"}),s(this,p,{writable:!0,value:' <div class="todo-list">\n      <header class="header">\n        <input class="header__input" type="text" placeholder="Enter an activity...">\n        <button type="button" class="header__button"><i class="fa fa-plus"></i></button>\n      </header>\n      <main class="list-container">\n        <ul class="list current-list"></ul>\n        <hr>\n        <ul class="list done-list"></ul>\n      </main>\n      <\/script>\n    </div>\n  '}),s(this,f,{writable:!0,value:{}}),s(this,m,{writable:!0,value:h.load(i(this,u))||[]})}}).init();
//# sourceMappingURL=04-todo-list.1d94cb14.js.map
